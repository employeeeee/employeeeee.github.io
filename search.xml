<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用idea搭建一个聚合项目]]></title>
    <url>%2F2018%2F11%2F28%2F%E4%BD%BF%E7%94%A8idea%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%81%9A%E5%90%88%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[一直都是在用idea搭建单项目的工程,一方面是项目需要也是想要学习一下,于是用idea搭建一个聚合的项目.idea搭聚合项目跟eclipse还是有一些区别的,使用的过程中也是遇到了不少坑,解决了之后记录一下,希望对刚想搭建聚合项目的朋友有所帮助. 项目主要的层次为common-pojo-mapper-service-api这样的形式的. 首先先新建一个新的项目 用来存放你所有的子项目 建立项目时候选择Maven 然后不需要使用模板 直接next 就可以 GroupId和’ArtifactId’完全是按照个人喜好来写的,填写好之后,直接next 这里是可以根据你上一步填写的ArtfactId自动生成的 可以修改,注意一些这些名字要一致就可以了,然后点击finish 就可以了. 然后你的项目中出现第一个项目 也就是你的父项目,主要的作用其实就是一个管理和存储其他项目的空间.然后选中你建立好的项目,右键选择Module,来建立你的子项目 和之前的一样 选择maven 不需要选择模板 然后点击next 会进入到这个界面Parent会自动选择为你当前选择的项目,当然不放心的话你也可以再点击选择一下.GroupId是和你parent的groupid是一样的,AtifactId 写一下你子项目的名称 前边也提到了我们的结构 所以这个项目起名叫做common然后下一步 finish即可.然后在生成的pom.xml文件中,导入你要使用的maven,这个还是根据自己实际项目使用来决定的.这里的pom文件可以把你要用到的所有包通过maven都导入进来,因为你之后的子项目都是可以继承这些包的. 然后再建立第二个子项目,跟前边的common一样,建立好后,进入设置点击选择common 就可以看见你导入的包中有了common的文件夹. 之后的和前边的也没有什么特别多的不同,一直建立到api这个项目,因为api项目是要向web提供接口的,也就是说是最后一个子项目,那么就需要使它运行起来.在api项目中新建一个类Application(名字是可以自己起的,主要的是这个类的作用)然后在这个类中加入注释@SptingBootApplication 个人具体代码如下 1234567@SpringBootApplicationpublic class FollowerApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(FollowerApplication.class,args); &#125;&#125; 然后为了测试 写一个controller12345678@RestControllerpublic class HelloWorldController &#123; @RequestMapping("/hello") public String Hello()&#123; return "Hello world"; &#125;&#125; 在resource文件下,新建一个yml文件或者properties‘文件’配置一下端口号 因为返回的不是页面而是一个字符串,所以用的是@RestController 然后之后 再运行你刚才写的Application 输入你的地址就能看见你的hello world了]]></content>
      <categories>
        <category>idea相关</category>
      </categories>
      <tags>
        <tag>idea maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于a标签实效的一些原因和解决办法]]></title>
    <url>%2F2018%2F11%2F23%2F%E5%85%B3%E4%BA%8Ea%E6%A0%87%E7%AD%BE%E5%AE%9E%E6%95%88%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8E%9F%E5%9B%A0%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%2F</url>
    <content type="text"><![CDATA[在项目的过程中 web前台出现了一个状态 就是a标签没有效果,不能点击不能跳转.然后找了一下原因 并附上解决办法. 导致&lt;a&gt;标签不能使用的原因是因为,在你放&lt;a&gt;标签的div的上层有其他的div遮挡住了.导致你不能点击到你的&lt;a&gt;标签,所以首先要让自己能 点到&lt;a&gt;标签就可以. 第一种方式 可以通过z-index的方式来解决,把你遮挡住标签的div放到下边,就是在你上层div中添加一条css属性 1z-index:-1 &lt;!--more--&gt; 但是`z-index`属性是必须在position为`absolute` `relative` `fixed`的情况下才可以使用. 而且在我的项目中,我的上级div也是有`&lt;a&gt;`标签的.使用z-index属性之后,上级div中的&apos;&lt;a&gt;&apos;标签页不能使用了. 所以需要修改上级div大小,并修改相应的padding和margin属性. 这个就需要根据实际情况调整.但是是可以保证每个div中的标签都可以使用的.]]></content>
      <categories>
        <category>web相关</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ssm数据库列名有下划线导致查询名称为空]]></title>
    <url>%2F2018%2F11%2F20%2Fssm%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%89%E5%80%BC%E5%90%8E%E5%8F%B0%E5%8F%96%E5%80%BC%E4%B8%BA%E7%A9%BA%2F</url>
    <content type="text"><![CDATA[今天在做项目是时候发现了一个问题数据库可以查询到数据 但是在后台获取的是null上网查了一下原因 最后发现是因为mybatis.xml配置的问题可以自己新建一个xml文件 加入123456&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt; &lt;/configuration 然后在其中加入配置如下123456789101112131415161718&lt;configuration&gt; &lt;settings&gt;&lt;!-- 使用列标签代替列名 --&gt;&lt;!-- &lt;setting name=&quot;useColumnLabel&quot; value=&quot;true&quot;/&gt; --&gt; &lt;!--允许 JDBC 支持自动生成主键--&gt; &lt;setting name=&quot;useGeneratedKeys&quot; value=&quot;false&quot;/&gt; &lt;!--是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。 --&gt; &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt;&lt;/settings&gt;&lt;/configuration&gt;--------------------- 作者：Cadence_D 来源：CSDN 版权声明：本文为博主原创文章，转载请附上博文链接！ 原文：https://blog.csdn.net/qq_35893120/article/details/78530528]]></content>
      <categories>
        <category>ssm相关</category>
      </categories>
      <tags>
        <tag>ssm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ajax和mybatis多表查询的配合使用]]></title>
    <url>%2F2018%2F11%2F13%2Fajax%E5%92%8Cmybatis%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E7%9A%84%E9%85%8D%E5%90%88%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[之前在测试了 一对一的方式后又测试了一下一对多的方式,具体的关系为.一个班级有一个老师有很多学生.在数据库中新建学生表 并存入数据.123456789101112create table orm_student(s_id int identity(14301101,1) primary key ,s_name varchar(20),class_id int) insert into orm_student values('张三',1401)insert into orm_student values('李四',1401)insert into orm_student values('赵武',1401)insert into orm_student values('刘能',1401)insert into orm_student values('王大麻',1401)insert into orm_student values('王心',1402) 然后写好对应的实体类就行了,因为是查询class来搜索到所有学生的.所以在测试时没有写学生相关的mapper文件等.并且要在class的实体类中,添加一条1private List&lt;Student&gt; studentList; 用来查询学生的信息.然后在class的mapper文件中进行配置 具体内容如下.123456789101112131415&lt;resultMap id="BaseResultMap" type="com.example.memory.pc.classes.domain.Classes"&gt; &lt;id column="c_id" property="cId" jdbcType="INTEGER"/&gt; &lt;result column="c_name" property="cName" jdbcType="NVARCHAR"/&gt; &lt;!-- &lt;result column="t_id" property="tId" jdbcType="INTEGER" /&gt;--&gt; &lt;association property="teacher" javaType="com.example.memory.pc.teacher.domain.Teacher"&gt; &lt;id property="tId" column="t_id"/&gt; &lt;result property="tName" column="t_name"/&gt; &lt;/association&gt; &lt;collection property="studentList" ofType="com.example.memory.pc.student.domain.Student"&gt; &lt;id property="id" column="s_id"/&gt; &lt;result property="studentName" column="s_name"/&gt; &lt;/collection&gt; &lt;/resultMap&gt; 其实就是在resultmap中加入学生的属性.因为是list所以配置的时候标签是 然后配置一下ofType就可以了 查询的sql语句如下 1234 selectt2.c_name,t1.t_name,t3.s_namefrom orm_teacher t1 ,orm_class t2,orm_student t3where t1.t_id = t2.t_id and t2.c_id=#&#123;cId&#125;; 在测试环境中可以查询到数据,因为查询的student是list的类型,那么我在把查询出来的整个list作为json数据传给前台的话就有一个解析list中学生list的问题, 所以又测试了一下解析的办法. 在controller中 将数据作为json类型传给前台.1234567891011121314151617@GetMapping("all")private void getAll(Model model, HttpServletResponse httpServletResponse, HttpServletRequest httpServletRequest) throws Exception &#123; String a = httpServletRequest.getParameter("cid"); System.out.println(a); Integer cId = Integer.valueOf(a); /*解决前台json中文乱码问题*/ httpServletResponse.setContentType("text/html;charset=utf-8"); ObjectMapper objectMapper =new ObjectMapper(); String json = objectMapper.writeValueAsString(classesService.getAll(cId)); System.out.println(json); Writer writer = httpServletResponse.getWriter(); writer.write(json); writer.close();&#125; 前台解析json1234567891011121314151617181920212223 $.getJSON('/classes/all',&#123;"cid": a&#125;,function(data)&#123; var list = new Array(); var str=""; for (var x=0; x &lt; data.length;x++ ) &#123; for (var i=0;i&lt;data[x].studentList.length;i++)&#123; console.log(data[x].studentList[i].studentName); console.log(data[x]); /* var str="";*/ str+="&lt;tr&gt;&lt;td&gt;"+1111+"&lt;/td&gt;&lt;td&gt;"+data[x].studentList[i].studentName+"&lt;/td&gt;&lt;td&gt;"+data[x].teacher.tName+"&lt;/td&gt;&lt;td&gt;"+data[x].cName+"&lt;/td&gt;&lt;td&gt;"+1401+"&lt;/td&gt;&lt;/tr&gt;" list.push(str); &#125; &#125; $('#tbody').html(str);/* console.log(list);*/ &#125;) 1234567891011121314151617181920212223&lt;div class="input-group"&gt; &lt;span class="input-group-addon"&gt;@&lt;/span&gt; &lt;input type="text" class="form-control" id="select" placeholder="请输入你要查询的班级id"&gt; &lt;button type="button" class="btn btn-default" onclick="getAll();ajax()" &gt;点击查询&lt;/button&gt;&lt;/div&gt;&lt;div class="col-lg-4"&gt;&lt;/div&gt;&lt;div class="col-lg-4"&gt; &lt;table class="table"&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;学生id&lt;/th&gt; &lt;th&gt;学生姓名&lt;/th&gt; &lt;th&gt;指导教师&lt;/th&gt; &lt;th&gt;班级&lt;/th&gt; &lt;th&gt;班级id&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id="tbody"&gt; &lt;/tbody&gt; &lt;/table&gt;&lt;/div&gt; 前台的html达到效果就是 输入班级id就可以查询到所有的信息了.]]></content>
      <categories>
        <category>ssm相关</category>
      </categories>
      <tags>
        <tag>ajax mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mybatis关联查询-1对1的查询]]></title>
    <url>%2F2018%2F11%2F11%2Fmybatis%E5%85%B3%E8%81%94%E6%9F%A5%E8%AF%A2-1%E5%AF%B91%E7%9A%84%E6%9F%A5%E8%AF%A2%2F</url>
    <content type="text"><![CDATA[因为项目要做地图关联的功能,其中会有关联查询,今天就在自己电脑上先做了一个测试 是学生 老师 班级这样的一个关联查询.先写的是老师和班级的查询 在这里是一个老师对应一个班级 要通过班级的id把这个班级的名称和教师的名称显示出来.在数据库中先建立教师表和班级表.123456--关联查询测试 班级表create table orm_class(c_id integer primary key,c_name NVARCHAR(20),t_id integer) 123456-- 关联查询测试 教师表create table orm_teacher(t_id integer primary key,t_name NVARCHAR(20),) 然后在表中添加数据后 在项目中新建教师和班级的实体类 因为要通过班级查询教师 所以是通过在班级的类中添加了一个 teacher具体代码如下12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455package com.example.memory.pc.classes.domain;import com.example.memory.pc.teacher.domain.Teacher;/** * @author enployeeeee * @Description: 班级类 * @date 2018/11/11 9:58 * @params * @param null */public class Classes &#123; private Integer cId; private String cName; /* * class表中有一个t_id字段 所以在Classes类中定义一个teacher属性 * */ private Teacher teacher; public Integer getcId() &#123; return cId; &#125; public void setcId(Integer cId) &#123; this.cId = cId; &#125; public String getcName() &#123; return cName; &#125; public void setcName(String cName) &#123; this.cName = cName; &#125; public Teacher getTeacher() &#123; return teacher; &#125; public void setTeacher(Teacher teacher) &#123; this.teacher = teacher; &#125; @Override public String toString() &#123; return "Classes&#123;" + "cId=" + cId + ", cName='" + cName + '\'' + ", teacher=" + teacher + '&#125;'; &#125;&#125; 然后定义Teacher类123456789101112131415161718192021222324252627282930313233343536/** * @author employeeeee * @Description: 新建教师类 * @date 2018/11/11 9:48 * @params * @param null */public class Teacher &#123; private Integer tId; private String tName; public Integer gettId() &#123; return tId; &#125; public void settId(Integer tId) &#123; this.tId = tId; &#125; public String gettName() &#123; return tName; &#125; public void settName(String tName) &#123; this.tName = tName; &#125; @Override public String toString() &#123; return "Teacher&#123;" + "tId=" + tId + ", tName='" + tName + '\'' + '&#125;'; &#125;&#125; 然后配置classesmapper文件123456789101112131415161718192021222324&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;&lt;mapper namespace="com.example.memory.pc.classes.dao.ClassesMapperDao"&gt; &lt;resultMap id="BaseResultMap" type="com.example.memory.pc.classes.domain.Classes"&gt; &lt;id column="c_id" property="cId" jdbcType="INTEGER"/&gt; &lt;result column="c_name" property="cName" jdbcType="NVARCHAR"/&gt; &lt;!-- &lt;result column="t_id" property="tId" jdbcType="INTEGER" /&gt;--&gt; &lt;association property="teacher" javaType="com.example.memory.pc.teacher.domain.Teacher"&gt; &lt;id property="tId" column="t_id"/&gt; &lt;result property="tName" column="t_name"/&gt; &lt;/association&gt; &lt;/resultMap&gt; &lt;select id="selectTeacher" resultMap="BaseResultMap"&gt; select * from orm_teacher t1 ,orm_class t2 where t1.t_id = t2.t_id and t2.c_id=#&#123;cId&#125;; &lt;/select&gt;&lt;/mapper&gt; 主要就是把teacher的对应属性给卸载了resultmap中 然后在test中进行测试 可以进行关联查询在进行配置的时候可能会遇到的问题(1) 使用工具自动生成的时候 是会把t_id也生成的 不知道会不会有影响 我是直接删去的 用teacher来代替(2) 进行测试时出现了 输出为null的情况 当时查了一下发现有很多种说法 但是我自己出现这个问题的原因 是因为第一次写的时候将resultmap写成了resulttype,后边改过来之后 输出就没问题了]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hive的操作流程]]></title>
    <url>%2F2018%2F11%2F09%2FHive%E7%9A%84%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[ajax+springboot+thymeleaf的使用]]></title>
    <url>%2F2018%2F11%2F08%2Fajax-springboot-thymeleaf%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[最近的一个项目中 涉及到了一个功能 是关于地图的数据联动所以就需要用ajax来异步更新数据.之前搭了一个springboot的项目.所以就用在这个项目上进行了一次尝试.记录一下整个的过程 ,希望会对刚学习ajax的同学有所帮助. 设计思路:前台的div中有一个数字 在前台获取到这个id 然后传到后台后台获取到id为这个值得对象.再将这个对象在前台展示出来. 出现的问题和解决办法.在前台的div中写了一个数字1&lt;div id=&quot;demo&quot;&gt;1&lt;/div&gt; 然后在js中通过 document.getEletmentById(&quot;demo&quot;).innerHTML;获取到了div中的值.然后在ajax的data的text标签中,然后后台通过httpServletRequest.getParameter(&quot;text&quot;)这个id,通过之前写过的跟去id获取对象的方法.来获取这个对象,放到list中,在通过遍历写出来.后台先是报了一个错误.因为通过httpServletRequest.getParameter获取到的是一个String值.但是我的id是一个int值,解决的办法是通过”integer.valueof()”将string类型转换成了integer.然后运行时报了一个”null”的错误.开始以为是空指针的错误,后来发现是因为integer.valueof的字符串是空值会报的错.因为不确定是因为转型的原因还是取值问题,所以在转型的语句上边加了一个sout的语句.做了一个输出.并且在前台取值后加了一个alert.然后取消转型 直接sout获取到的值.运行后发现前台没问题.后台输出了一个null后,输出了正常获取到的id.考虑到可能是加载的问题.把ajax写到了一个function中,然后通过按钮触发函数.运行后,发现先输出null,点击按钮输出正常id.这样就找到了问题的原因.是因为页面加载的时候直接就运行了我在controller下写的方法.突然想到,因为ajax是异步加载,那么应该通过一个链接跳转到这个网页,一个链接是用来执行ajax的.于是在controller 中新加了一个getmapping,直接跳转到当前网页,再通过按钮跳转新链接.完成ajax传值的操作.再次运行.返现没有报错,前台取值正常,后台取值正常,但是前台并没有显示出来对象.显示检查了一下each 发现没有写错.然后在后台的model代码前sout在后台通过根据id获取的对象.运行 发现后台是获取到了这个对象的 但是前台还是没有显示.在这个问题上还是纠结了一会的.然后在前台的function中传了一个参数,把参数通过consle.log输出发现了问题.输出的是一个网页.因为在控制层写的String方法,然后return的是一个html.所以就出现了错误.然后将String方法 改成 viod 返回的值改成json字符串.这里请教了一下同事.具体代码如下123456ObjectMapper objectMapper = new ObjectMapper(); String json = objectMapper.writeValueAsString(userService.getById(userid)); Writer writer = httpServletResponse.getWriter(); writer.write(json); writer.close(); 这里是直接给前台返回了一个json类型的值.然后在前台对json数据进行解析.12345var str=&quot;&quot; str+=&quot;&lt;tr&gt;&lt;td&gt;&quot;+data.userid+&quot;&lt;/td&gt;&lt;td&gt;&quot;+data.username+&quot;&lt;/td&gt;&lt;td&gt;&quot;+data.password+&quot;&lt;/td&gt;&lt;td&gt;&quot;+data.nickname+&quot;&lt;/td&gt;&lt;/tr&gt;&quot;; $(&apos;#tbody&apos;).html(str); tbody是表格的id然后执行发现好用 然后吃饭的时候突然想到.我返回的是一个html,前台没有数据是因为我的数据在返回的html中,那么我可以直接返回这个html给这个div.在div直接加载这个只有表格的网页应该也是可以的 吃完饭测试了一下,果然是可行的.这个思路是没问题的.具体的代码也比较简单.所以就不贴了.整个的思路就是这样的. perfect 也感谢我文武兄弟的帮助.]]></content>
      <categories>
        <category>ssm相关</category>
      </categories>
      <tags>
        <tag>ajax ssm springboot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ajax与ssm前后台传值]]></title>
    <url>%2F2018%2F11%2F07%2Fajax%E4%B8%8Essm%E5%89%8D%E5%90%8E%E5%8F%B0%E4%BC%A0%E5%80%BC%2F</url>
    <content type="text"><![CDATA[公司最近写的项目需要联动 然后要用到ajax的技术,虽然以前在项目中用到过ajax 但是没有很好地理解晚上的时候 仔细的想了一想 ajax的用法 在这里记录一下 因为之前写过echarts 后台传值的时候是通过ajax传的,个人觉得后台传值还是比较简单的.理论上来说,就是通过sql语句在数据库中进行取值后 将取到的值放在list在controller 把 list放到model中 然后通过遍历 取出数值. 然后可以根据实际项目的需要将不同的属性放在不同的数组中,再在对应的位置将内容取出来.因为是做java的 所以在如何前台向后台传值这里还是稍微的卡了一下.我是这样做测验的在前台的div里 写了一句话.通过jsvar a= document.geteletmentById.InnerHtml获取到了这段话的内容.然后想了一下如何将这个值传到后台.ajax 其中是有一个属性type&#39;的 其实就是对应的controller中的getmapping和postmapping 我第一次写的时候就是因为在get请求中执行的ajax 而我在后台把方法写到了postmapping中 所以没有获取到数据. 接下来就是把我取到的值写到ajax 的 data中data[“a”:a]`(测试写的比较着急 不要在意命名)然后在controller中 通过httphttpServletRequest.getprameter(“a”)获取到ajax传回得数值.我在前台和后台分别写了alert 和 sout最后是成功通过ajax 进行了 前后台的数据交互当然了 通常ajax前台的数值还是在post请求中使用的比较多道理还是一样的在此记录一下 以便日后浏览.]]></content>
      <categories>
        <category>ssm相关</category>
      </categories>
      <tags>
        <tag>ajax ssm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hive设计思想与架构]]></title>
    <url>%2F2018%2F11%2F06%2FHive%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3%E4%B8%8E%E6%9E%B6%E6%9E%84%2F</url>
    <content type="text"><![CDATA[Hive是建立在Hadoop上的 是针对MapReduce开发的技术 Hive的组件主要分为两类: 客户端组件和服务端组件. 下面我们对这些组件进行逐一说明.1) 客户端组件CLI: Command Line Interface,命令行接口 最常用的客户端组件就是CLI CLI启动的时候 会同时启动一个Hive副本Client: Client是Hive的客户端 用于连接Hive Server 在启动Client模式的时候 需要指出Hive Server 所在的节点 , 并且在该节点启动Hive Server图4-2 所示的结构图没有写上 Thrift客户端 但是Hive架构的许多客户端接口 都是建立在Thrift客户端上的 包括JDBC 和 ODBC接口Web GUI : Hive 客户端 提供 了一种通过网页访问Hive 所提供的服务的方式 这个接口duiying`Hive的HWI(Hive Web Interface) 组件 使用前要启动HWI服务2) 服务器端组件Driver 组件: 该组件包括Compiler Optimizer 和 Executor 其作用是完成HiiveQL(类SQL)查询语句的词法分析 语法分析 编译 优化及查询计划的生成.生成的查询计划存储在HDFS中 并在随后又MapReduce调用执行.MetaStore组件: 元数据服务组件 这个组件存储Hive的元数据.Hive的元数据存储在关系数据库里 Hive支持的关系数据库有Derby Mysql.Hive中的元数据包括表的名字 表的列和分区及其属性. 表的属性(是否为外部表等) 表数据所在目录 元数据对于Hive十分重要 所以Hive支持吧MEtaStore服务独立出来 安装到远程的服务器集群里从而解耦Hive服务 和 MetaStore服务 保证Hive运行的健壮性.Hive的MetaStore组件是Hive元数据的集中存放地 MetaStore 组件包括两个部分: MetaStore 服务和 后台数据的存储. 后台数据存储的介质就是关系数据库例如Hive 默认的嵌入式磁盘数据库Derby 还有MYsql 数据库 MetaStore服务是建立在后台数据存储介质之上 并且可以和Hive服务进行交互的服务组件默认情况下 MetaStore服务和Hive服务是安装在一起的 运行在同一个进程当中 也可以把MetaStore服务从Hive服务中剥离出来独立安装在一个集群里 Hive远程调用MetaStore服务 我们可以把元数据这一层放到防火墙之后 当客户端访问Hive服务时 就可以连接到元数据这一层 从而提供更好的管理性能和安全保障. 使用远程的MetaStore服务 可以让MetaStore服务和Hive服务运行在不同的进程里 这样既保证了Hive的稳定 有提升了Hive服务的效率Thrift服务 :Thtift是FaceBook开发的一个软件框架 它用来进行可扩展且跨语言服务的开发 Hive继承了该服务 可以让不同的编程语言调用Hive的接口.]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据 Hive</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hive和数据库的区别]]></title>
    <url>%2F2018%2F11%2F05%2FHive%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[Hive 和 数据库的区别Hive并不是数据库,从结构上看,Hive和数据库除了有类似的查询语言,再无类似之处.数据库可以用在Online的应用中,但是Hive是为了数据仓库而设计的 数据存储位置 Hive是建立在Hadoop上的,所有Hive的数据都是存储在HDFS中的;而数据库可以将数据保存在块设备或者本地文件系统中 查询语言 由于SQL被广泛地应用在数据仓库中 一次针对Hive的特性设计了类SQL的查询语言HQL 熟悉SQL的开发者可以很方便的使用Hive进行开发. 索引 Hive在加载数据的过程中 不会对数据进行任何处理 甚至不会对数据进行扫描 因此也没有对数据中的某些Key建立索引,Hive要访问数据中满足条件的特定值时需要暴力扫描整个数据 因此访问延迟高,但由于MapReduce的引入 Hive可以进行并行访问数据 因此即使没有索引 对于大数据量的访问 Hive仍然可以体现出优势 数据格式 Hive中没有定义专门的数据格式 数据格式可以由用户指定 用户定义数据格式需要指定三个属性: 列分隔符 行分隔符 以及读取文件数据的方法 .在加载过程中不会对数据本省进行修改 知识复制或者移动到相应的HDFS目录中.而数据库会按照一定的组织存储 过程耗时 执行 Hive查询的执行是通过 MapReduce实现 而数据库有自己的执行引擎. Hive不支持对数据的改写和添加 加载时候是确定好的 延迟 MapReduce本身延迟比较高 数据规模小的时候 数据库的执行延迟较低 可扩展性 由于Hive是建立在Hadoop上 因此Hive的可扩展性和Hadoop一直 而数据库的扩展性很有限 数据规模 由于Hive建立在集群 可以利用MapReduce进行并行计算 因此可以支持很大规模的数据10 Hive对硬件要求比较低 而关系型数据库管理系统为了提高线上处理速度 对硬件要求相对较高.]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Hive 大数据</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[idea打开项目没有文件夹]]></title>
    <url>%2F2018%2F11%2F05%2Fidea%E6%89%93%E5%BC%80%E9%A1%B9%E7%9B%AE%E6%B2%A1%E6%9C%89%E6%96%87%E4%BB%B6%E5%A4%B9%2F</url>
    <content type="text"><![CDATA[使用idea打开eclipse项目 会出现没有目录的情况解决办法: 关闭idea 找到项目文件下的.idea文件夹将.idea文件夹删除再重新打开项目即可.]]></content>
      <categories>
        <category>idea使用</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hive相关]]></title>
    <url>%2F2018%2F11%2F04%2FHive%E7%9B%B8%E5%85%B3%2F</url>
    <content type="text"><![CDATA[Hive 的简介Hive 蜂巢 是一种数据仓库工具 要明确的是Hive知识一种工具 可以用Hive将结构化的数据文件映射为一张数据库表 并提供完整的SQL 查询功能 可以将Sql 语句 转换为MapReduce任务运行所以Hive 本身是不具备存储功能的 要将它和数据库区分开 Hive的来源Hive是Facebook 开发的构建于Hadoop集群之上的数据仓库应用 它提供了 类似于SQL语法的HQL语句作为数据访问接口.这使普通分析人员在应用HADOOP的过程中更加容易学习.至于Facebook为什么使用hadoop和Hive组建数据仓库 大致原因如下: Facebook的数据仓库开始是构建于MySQL之上的,但是随着数据量的增加 查询需要的时间太久了 当数据量达到1TB 时 MySQL后台进程就崩溃了,所以Facebook决定把数据仓库转移到Oracle.这次转移也付出了很多的代价 Oracle虽然可以应对几TB的数据 但是在手机用户点击流数据(每天大约400gb)后 Oracle 也支持永恒不住了 由此要考虑新的数据仓库方案 4.内部人员简历一个并行日志处理系统Cheetah 勉强可以在24小时内处理一天的点击流数据 但是依旧有很多缺点 后来开发人员尝试将日志数据同事载入Cheetah和Hadoop中对比 发现Hadoop在处理大规模数据更有优势,后来就把工作流都转移到了Hadoop上 并基于Hadoop做了很多有价值的分析 为了使大多数人使用Hadoop 开发了Hive Hive 提供了类似于SQL的查询接口 集群存储2.5PB的数据 并且以每天15TB的数据增长 每天提交3000以上的数据 大约处理 55TB的数据]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据 Hive</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于thymeleaf+layout布局的使用方式]]></title>
    <url>%2F2018%2F11%2F04%2F%E5%85%B3%E4%BA%8Ethymeleaf-layout%E5%B8%83%E5%B1%80%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[最近在做项目时候用到了 layout布局的方式,相对方便了很多,记录一下.这个layout的效果是可以把网页的相同部分提取出来,只需要更改核心不一样的地方就可以了.也就是更改后边我们会提到的content部分. 首先建立相同部分的html,这里我命名为layout.html,放在了`templates/layout’文件夹下,这个路径以后是会用到的,以下是我的layout的代码,比较粗糙.但是应该会更好的帮助理解.要提到几个重要的部分 xmlns:th=”http://www.thymeleaf.org&quot; 引入th xmlns:layout=”http://www.w3.org/1999/xhtml&quot; 引入 thymeleaf 你要将不同内容放置的位置 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot; xmlns:layout=&quot;http://www.w3.org/1999/xhtml&quot;&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;欢迎登录&lt;/title&gt; &lt;head&gt; &lt;style&gt; h1 &#123; color: yellowgreen; &#125; table, th, td &#123; border: 1px solid sandybrown; &#125; th &#123; background: sandybrown; color: cornsilk; &#125; .row:after &#123; content: &quot;&quot;; clear: both; display: block; &#125; [class*=&quot;col-&quot;] &#123; float: left; padding: 15px; &#125; html &#123; font-family: &quot;Lucida Sans&quot;, sans-serif; &#125; .header &#123; background-color: #9933cc; color: #ffffff; padding: 15px; &#125; .menu ul &#123; list-style-type: none; margin: 0; padding: 0; &#125; .menu li &#123; padding: 8px; margin-bottom: 7px; background-color: #33b5e5; color: #ffffff; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24); &#125; .menu li:hover &#123; background-color: #0099cc; &#125; .aside &#123; background-color: #33b5e5; padding: 15px; color: #ffffff; text-align: center; font-size: 14px; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24); &#125; .footer &#123; background-color: #0099cc; color: #ffffff; text-align: center; font-size: 12px; padding: 15px; &#125; .right &#123; float: right; &#125; .col-1 &#123; width: 8.33%; &#125; .col-2 &#123; width: 16.66%; &#125; .col-3 &#123; width: 25%; &#125; .col-4 &#123; width: 33.33%; &#125; .col-5 &#123; width: 41.66%; &#125; .col-6 &#123; width: 50%; &#125; .col-7 &#123; width: 58.33%; &#125; .col-8 &#123; width: 66.66%; &#125; .col-9 &#123; width: 75%; &#125; .col-10 &#123; width: 83.33%; &#125; .col-11 &#123; width: 91.66%; &#125; .col-12 &#123; width: 100%; &#125; @media only screen and (max-width: 768px) &#123; /* For mobile phones: */ [class*=&quot;col-&quot;] &#123; width: 100%; &#125; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;center&gt; &lt;div class=&quot;header&quot;&gt; &lt;h2&gt;User Information table&lt;/h2&gt; &lt;span th:text=&quot;$&#123;&apos;Hi &apos;+session.loginUser.username&#125;&quot;&gt;Hi, Admin&lt;/span&gt; &lt;/div&gt; &lt;a th:href=&quot;@&#123;/user/index&#125;&quot;&gt;&lt;/a&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-3 menu&quot;&gt; &lt;ul&gt; &lt;li&gt;用户信息管理&lt;/li&gt; &lt;li&gt;学生信息管理&lt;/li&gt; &lt;li&gt;教师信息管理&lt;/li&gt; &lt;li&gt;课程信息管理&lt;/li&gt; &lt;li&gt;周边商品管理&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;col-5&quot;&gt; //重点部分 &lt;div layout:fragment=&quot;content&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;col-3 right&quot;&gt; &lt;div class=&quot;aside&quot;&gt; &lt;h2&gt;What?&lt;/h2&gt; &lt;p&gt;Chania is a city on the island of Crete.&lt;/p&gt; &lt;h2&gt;Where?&lt;/h2&gt; &lt;p&gt;Crete is a Greek island in the Mediterranean Sea.&lt;/p&gt; &lt;h2&gt;How?&lt;/h2&gt; &lt;p&gt;You can reach Chania airport from all over Europe.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/center&gt; &lt;div class=&quot;footer&quot;&gt; &lt;p&gt;Resize the browser window to see how the content respond to the resizing.@Design by &lt;a href=&quot;www.baidu.com&quot;&gt;empoloyeeeeee&lt;/a&gt; &lt;/p&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 然后建立新的html,这里我建立的是一个简单的添加用户的界面add.html,代码如下要提到的几个重要的部分 xmlns:layout=”http://www.w3.org/1999/xhtml&quot; xmlns:th=”http://www.thymeleaf.org layout:decorator=”layout/layout” 前边我们提到的路径,这个就是你layout.html文件的位置. 设置div content 然后就可以将你需要更改的内容写在这个位置1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot; xmlns:layout=&quot;http://www.w3.org/1999/xhtml&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot; layout:decorator=&quot;layout/layout&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;style&gt; input[type=&quot;text&quot;]:focus&#123; background-color: grey; &#125; input#userid &#123; margin-left: 20px; &#125; #add&#123; padding: 10px 40px; border: 5px gray solid; box-shadow: 10px 10px 5px aquamarine; font-family: 华文行楷; font-size: 14px; border-radius: 20px; &#125; input&#123; padding: 10px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;!--&lt;div class=&quot;bs-example&quot; layout:fragment=&quot;content&quot;&gt;--&gt;&lt;div layout:fragment=&quot;content&quot; &gt; &lt;div id=&quot;add&quot;&gt; &lt;form action=&quot;#&quot; th:action=&quot;@&#123;/user/add&#125;&quot; th:object=&quot;$&#123;userList&#125;&quot; method=&quot;post&quot;&gt; &lt;label&gt;id&lt;/label&gt;&lt;input type=&quot;text&quot; th:field=&quot;*&#123;userid&#125;&quot; id=&quot;userid&quot;/&gt;&lt;br&gt; &lt;label&gt;姓名&lt;/label&gt;&lt;input type=&quot;text&quot; th:field=&quot;*&#123;username&#125;&quot;/&gt;&lt;br&gt; &lt;label&gt;密码&lt;/label&gt;&lt;input type=&quot;text&quot; th:field=&quot;*&#123;password&#125;&quot;/&gt;&lt;br&gt; &lt;label&gt;昵称&lt;/label&gt;&lt;input type=&quot;text&quot; th:field=&quot;*&#123;nickname&#125;&quot;/&gt;&lt;br&gt; &lt;input type=&quot;submit&quot; value=&quot;添加&quot;/&gt; &lt;/form&gt; &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 之前在写到这的时候就直接跑程序了 ,发现不好用,但是感觉写的没有问题 ,最后找到了问题所在,在meaven中没有配置thmeleaf,所以在meaven中添加如下代码 12345&lt;dependency&gt; &lt;groupId&gt;nz.net.ultraq.thymeleaf&lt;/groupId&gt; &lt;artifactId&gt;thymeleaf-layout-dialect&lt;/artifactId&gt; &lt;version&gt;2.2.2&lt;/version&gt; &lt;/dependency&gt; controller中的写法我就不过多的叙述了 配置好路径 就可以测试一下了 亲测是通的 效果如图]]></content>
      <categories>
        <category>ssm项目相关</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>thymeleaf</tag>
        <tag>meaven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[idea新建类自动生成注释]]></title>
    <url>%2F2018%2F11%2F03%2F%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E6%9D%A5%E6%BA%90%2F</url>
    <content type="text"><![CDATA[打开idea 使用ctrl+alt+s 打开设置。/* Created by 周子淏 on ${DATE} ${TIME}*/讲这个内容复制粘贴到text框内。新建class后 会自动生成注释。]]></content>
      <categories>
        <category>idea的使用</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[firstBlog]]></title>
    <url>%2F2018%2F11%2F03%2FFirstBlog%2F</url>
    <content type="text"><![CDATA[这是我的一个博客]]></content>
  </entry>
</search>
